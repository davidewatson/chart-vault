---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "vault.fullname" . }}
  labels:
    app: {{ template "vault.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-{{ .Values.vault.component }}"
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.vault.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "vault.fullname" . }}
    spec:
      nodeSelector:
        nodepool: clusterNodes
      containers:
      - name: {{ template "vault.fullname" . }}
        image: "{{.Values.vault.image}}:{{.Values.vault.imageTag}}"
        securityContext:
          capabilities:
            add:
            - IPC_LOCK
        imagePullPolicy: {{ .Values.vault.imagePullPolicy }}
        ports:
{{- if .Values.vault.enableTLS }}
        - name: https
          containerPort: 443
{{- else }}
        - name: http
          containerPort: 80
{{- end }}
        volumeMounts:
        - name: config
          mountPath: /vault-bin/vault-start.sh
          subPath: vault-start.sh
          readOnly: false
        - name: config
          mountPath: /etc/vault/cfg/config.json
          subPath: config.json
          readOnly: false
{{- if .Values.vault.enableTLS }}
        - name: tls
          mountPath: /etc/vault/tls
{{- end }}
        env:
        - name: VAULT_DEBUG
          value: {{ default "false" .Values.vault.enableDebug | quote }}
        - name: RUN_TESTS
          value: "false"
        - name: VAULT_LISTENER_PROTO
          value: "{{- if .Values.vault.enableTLS }}https{{- else }}http{{- end }}"
        - name: VAULT_LISTENER_ADDR
          value: "{{ .Values.vault.listenerAddress }}"
        - name: VAULT_LISTENER_PORT
          value: "{{ .Values.vault.listenerPort }}"
        - name: VAULT_INIT_VARS
          value: '{
                    "skip_init_vault": {{ default true .Values.vault.init.skip_init_vault | quote }},
                    "skip_unseal_vault": {{ default true .Values.vault.init.skip_unseal_vault | quote }},
                    "skip_email_recipients": {{ default true .Values.vault.init.skip_email_recipients | quote }},
                    "encrypt_key_to_rcpt": {{ default false .Values.vault.init.encrypt_key_to_rcpt | quote }},
                    "enable_auth_backends": {{ default true .Values.vault.init.enable_auth_backends | quote }},

                    "recipients": 
                    [
                      {{- range $i, $k := .Values.vault.init.recipients }}
                      {{- if gt $i 0 }},{{ end }} 
                      {
                        "email": {{ $k.email | quote }}, 
                        "pubkey": {{ $k.pubkey | quote }} 
                      }
                      {{- end }}
                    ],
                    "auth_backends": [
                      {{- range $i, $e := .Values.vault.init.auth_backends }}
                      {{- if gt $i 0 }},{{ end }} 
                      {{ $e | quote }}
                      {{- end }}
                      ]
                  }'
        resources:
          limits:
            cpu: {{ .Values.vault.cpu }}
            memory: {{ .Values.vault.memory }}
          requests:
            cpu: {{ .Values.vault.cpu }}
            memory: {{ .Values.vault.memory }}
        command:
         - "/bin/sh"
         - "/vault-bin/vault-start.sh"
      volumes:
      - name: config
        configMap:
          name: {{ template "vault.fullname" . }}
{{- if .Values.vault.enableTLS }}
      - name: tls
        secret:
          secretName: {{ template "vault.fullname" . }}.tls
{{- end }}
{{- if .Values.vault.tolerations }}
      tolerations:
      {{- range .Values.vault.tolerations }}
      - key: {{ .key | default ("") }}
        value: {{ .value | default ("")}}
        operator: {{ .operator | default ("Equal") }}
        effect: {{ .effect  | default ("")}}
      {{- end }}
{{- end }}
{{- if .Values.vault.scheduling.affinity }}
{{- if .Values.vault.scheduling.affinity.node }}
{{- if .Values.vault.scheduling.affinity.node.labels }}
      affinity:
        nodeAffinity:
          {{ .Values.vault.scheduling.affinity.node.type }}:
            nodeSelectorTerms:
            - matchExpressions:
                {{- range .Values.vault.scheduling.affinity.node.labels }}
                - key: {{ .key }}
                  operator: {{ .operator }}
                  values:
                  {{- range .values }}
                  - {{ . }}
                  {{- end }}
                {{- end }}
{{- end }}
{{- end }}
{{- end }}
