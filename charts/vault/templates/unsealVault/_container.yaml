{{/*
Create helm partial for Vault initialization
*/}}
{{- define "containerUnsealVault" }}
- name: unseal-vault
  image: "{{.Values.vault.image}}"
  imagePullPolicy: {{ .Values.vault.imagePullPolicy }}
  {{- if .Values.vault.tls.enabled }}
  volumeMounts:
  - name: vault-tls-data
    mountPath: {{ .Values.vault.tls.secret.mountPath }}
    readOnly: true
  {{- end }}
  env:
  - name: MY_POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: SCRIPT
    value: &unsealVault |-
      #!/bin/sh

      printenv

      {{- if .Values.vault.pgpKeys }}
        echo "Skipping setup master key shards are setup to be PGP-encrypted"
        exit 0;
      {{- end }}

      INITIALIZED_UNSEALED_ACTIVE=200
      UNSEALED_STANDBY=429
      INVALID=0
      DATA_RECOVERY=472
      UNINITIALIZED=501
      INITIALIZED_AND_SEALED=503   

      # Get initial health code
      healthCode=0

      # Get initial health code
      until [ ${healthCode} -gt ${INVALID} ]; do
        {{ if .Values.vault.tls.enabled }}
        healthCode=$(curl --connect-timeout 1 \
          -s -o /dev/null \
          -w %{http_code} \
          --cert {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.certFile }} \
          --cert-type PEM \
          --key {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.keyFile }} \
          --key-type PEM \
          --location \
          --cacert {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.caFile }} \
            https://{{ template "vault.name" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:{{ .Values.vault.listenerPort }}/v1/sys/leader)
        {{- else }}
        healthCode=$(curl --connect-timeout 1 \
          -s -o /dev/null \
          -w %{http_code} \
          --location \
            http://{{ template "vault.name" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:{{ .Values.vault.listenerPort }}/v1/sys/health)
        {{- end }}

        # sleep for a 3 sec if failed
        if [ ${healthCode} -eq ${INVALID} ]; then
          echo "Will retry, result is ${healthCode}"
          sleep 3;
        fi
      done

      if [ ${healthCode} -ne ${INITIALIZED_AND_SEALED} ]; then
        echo "Vault is not in initialized and sealed mode (503) - got ${healthCode}, exiting."
        exit 0;
      fi

      # if health code is INITIALIZED_AND_SEALED, perform unseal for each of the vault pods
      echo "Got health code ${healthCode}, proceeding with unseal."

      # check for the unseal secret
      echo "Checking if unseal secret is present"
      if kubectl get secret {{ $.Values.vault.setup.masterSecret | default (include "vault.name" $ ) }} --namespace  {{ $.Release.Namespace }} ; then
        echo "Found {{ $.Values.vault.setup.masterSecret | default (include "vault.name" $ ) }} in {{ $.Release.Namespace }}"
      else
        echo "Could not find {{ $.Values.vault.setup.masterSecret | default (include "vault.name" $ ) }} in {{ $.Release.Namespace }}! Exiting."
        echo "Vault will not be unsealed!"
        exit 0;
      fi

      # for each vault pod, wait for it to fully come up, then run an unseal, 'unsealShares' number of times
      {{- range $podNum, $p := until (int .Values.vault.replicas) }}
      {{- range $keyNum, $k := until (int $.Values.vault.unsealShares) }}

      echo "Unsealing pod {{ template "vault.name" $ }}-{{ $podNum }} of {{ $.Values.vault.replicas }} with key {{ $keyNum }} of {{ $.Values.vault.unsealShares }}"
      currentUnsealShard=$(kubectl get secret {{ $.Values.vault.setup.masterSecret | default (include "vault.name" $ ) }} -o json --namespace  {{ $.Release.Namespace }} | jq --raw-output '.data."unseal.json"' | base64 --decode | jq -r ".keys[{{ $keyNum }}]")

      # first wait for the pod to be responsive
      echo "Making sure pod {{ template "vault.name" $ }}-{{ $podNum }} is up and running..."
      healthCode=${INVALID}
      until [ ${healthCode} -eq ${INITIALIZED_AND_SEALED} ]; do
        {{ if $.Values.vault.tls.enabled }}
        healthCode=$(curl --connect-timeout 1 \
          -s -o /dev/null \
          -w %{http_code} \
          --cert {{ $.Values.vault.tls.secret.mountPath }}/{{ $.Values.vault.tls.secret.certFile }} \
          --cert-type PEM \
          --key {{ $.Values.vault.tls.secret.mountPath }}/{{ $.Values.vault.tls.secret.keyFile }} \
          --key-type PEM \
          --cacert {{ $.Values.vault.tls.secret.mountPath }}/{{ $.Values.vault.tls.secret.caFile }} \
            https://{{ template "vault.name" $ }}-{{ $podNum }}.{{ template "vault.name" $ }}.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}:{{ $.Values.vault.listenerPort }}/v1/sys/health)
        {{- else }}
        healthCode=$(curl --connect-timeout 1 \
          -s -o /dev/null \
          -w %{http_code} \
            http://{{ template "vault.name" $ }}-{{ $podNum }}.{{ template "vault.name" $ }}.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}:{{ $.Values.vault.listenerPort }}/v1/sys/health)
        {{- end }}

        echo "Got ${healthCode}"

        # sleep for a 3 sec if failed
        if [ ${healthCode} -ne ${INITIALIZED_AND_SEALED} ]; then
          echo "Pod {{ template "vault.name" $ }}-{{ $podNum }} not ready yet, will wait 3 seconds"
          sleep 3;
        fi
      done

      {{ if $.Values.vault.tls.enabled }}
      curl --connect-timeout 1 \
        --request PUT \
        --data "{\"key\": \"${currentUnsealShard}\"}" \
        --cert {{ $.Values.vault.tls.secret.mountPath }}/{{ $.Values.vault.tls.secret.certFile }} \
        --cert-type PEM \
        --key {{ $.Values.vault.tls.secret.mountPath }}/{{ $.Values.vault.tls.secret.keyFile }} \
        --key-type PEM --cacert {{ $.Values.vault.tls.secret.mountPath }}/{{ $.Values.vault.tls.secret.caFile }} \
          https://{{ template "vault.name" $ }}-{{ $podNum }}.{{ template "vault.name" $ }}.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}:{{ $.Values.vault.listenerPort }}/v1/sys/unseal
      {{- else }}
      curl --connect-timeout 1 \
        -o unseal.json \
        -w %{http_code} \
        --request PUT \
        --data "{\"key\": \"${currentUnsealShard}\"}" \
          http://{{ template "vault.name" $ }}-{{ $podNum }}.{{ template "vault.name" $ }}.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}:{{ $.Values.vault.listenerPort }}/v1/sys/unseal
      {{- end }}
      {{- end }}
      {{- end }}


      # check the health status - should return INITIALIZED_UNSEALED_ACTIVE
      echo "Unsealed. Checking status - should return ${INITIALIZED_UNSEALED_ACTIVE}"
      healthCode=${INVALID}
      until [ ${healthCode} -eq ${INITIALIZED_UNSEALED_ACTIVE} ]; do
        {{ if $.Values.vault.tls.enabled }}
        healthCode=$(curl --connect-timeout 1 \
          -s -o /dev/null \
          -w %{http_code} \
          --cert {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.certFile }} \
          --cert-type PEM \
          --key {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.keyFile }} \
          --key-type PEM \
          --cacert {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.caFile }} \
          --location \
            https://{{ template "vault.access" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}/v1/sys/health?standbyok=true&activecode=200)
        {{- else }}
          healthCode=$(curl --connect-timeout 1 \
            -s -o /dev/null \
            -w %{http_code} \
            --location \
              http://{{ template "vault.access" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}/v1/sys/health?standbyok=true&activecode=200)
        {{- end }}

        # sleep for a 3 sec if failed
        if [ ${healthCode} -ne ${INITIALIZED_UNSEALED_ACTIVE} ]; then
          echo "Pod retrying in 3 seconds..."
          sleep 3;
        fi
      done

      if [ ${healthCode} -eq ${INITIALIZED_UNSEALED_ACTIVE} ]; then
        echo "Unseal success! Status is ${INITIALIZED_UNSEALED_ACTIVE}"
        exit 0;
      else
        echo "Unseal FAILURE! Status is ${healthCode}"
        exit 1;
      fi
  command: [ "/bin/sh" ]
  args: ["-c", *unsealVault]
{{- end }}
