{{- if and .Values.vault.setup.init .Values.vault.setup.unseal }}
apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-token-test"
  labels:
    app: smoke-test
    release: {{ .Release.Name }}
  annotations:
    "helm.sh/hook": test-success
spec:
  serviceAccountName: {{ template "vault.name" . }}-secret-rw
  containers:
  - name: token-test
    image: "{{.Values.vault.image}}"
    imagePullPolicy: {{ .Values.vault.imagePullPolicy }}
    {{- if .Values.vault.tls.enabled }}
    volumeMounts:
    - name: vault-tls-data
      mountPath: {{ .Values.vault.tls.secret.mountPath }}
      readOnly: true
    {{- end }}
    env:
    - name: VAULT_ADDR
      value: {{ if .Values.vault.tls.enabled }}https://{{ else }}http://{{ end }}{{ template "vault.access" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
    {{- if .Values.vault.tls.enabled }}
    - name: VAULT_CACERT 
      value: {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.caFile }}
    - name: VAULT_CLIENT_CERT
      value: {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.certFile }}
    - name: VAULT_CLIENT_KEY
      value: {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.keyFile }}
    {{- end }}
    - name: SCRIPT
      value: &testVault |-
        #!/bin/sh

        printenv 

        INITIALIZED_UNSEALED_ACTIVE=200
        INVALID=0

        # Get initial health code
        healthCode=${INVALID}

        until [ ${healthCode} -eq ${INITIALIZED_UNSEALED_ACTIVE} ]; do
          {{ if .Values.vault.tls.enabled }}
          healthCode=$(curl --connect-timeout 1 \
            -o /dev/null \
            -w %{http_code} \
            --cert {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.certFile }} \
            --cert-type PEM \
            --key {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.keyFile }} \
            --key-type PEM \
            --cacert {{ .Values.vault.tls.secret.mountPath }}/{{ .Values.vault.tls.secret.caFile }} \
            --location \
              ${VAULT_ADDR}/v1/sys/leader)
          {{- else }}
          healthCode=$(curl --connect-timeout 1 \
            -o /dev/null \
            -w %{http_code} \
            --location \
              ${VAULT_ADDR}/v1/sys/leader)
          {{- end }}

          if [ ${healthCode} -ne ${INITIALIZED_UNSEALED_ACTIVE} ]; then
            echo "Got ${healthCode} - Will retry."
          fi

          sleep 3;
        done

        # grab the test data 
        cat<<EOF > testpolicy.hcl
        path "secret/testpolicy" {
          capabilities = ["create", "read", "update", "delete", "list"]
        }
        EOF

        # get the root token
        rootToken=$(kubectl get secret {{ .Values.vault.setup.masterSecret | default (include "vault.name" .) }} \
          -o json \
          -n {{ .Release.Namespace }} | jq --raw-output '.data."unseal.json"' | base64 -d | jq --raw-output .root_token)

        # login with root token
        vault login -method=token token=${rootToken}

        # write a test policy
        vault write sys/policy/testpolicy policy=@testpolicy.hcl

        # create a new token with the test policy
        newToken="36c52638-8ac6-674d-3e47-2058ebadf00d"
        vault token create -policy=testpolicy -id=${newToken}

        # login with new token
        vault login -method=token token=${newToken}

        # write and test some Values
        testKvValue="Party like it is 1899"

        vault write secret/testpolicy testvalue="${testKvValue}"
        readValue=$(vault read -field=testvalue secret/testpolicy)

        if [ "${readValue}" == "${testKvValue}" ]; then
          exit 0
        else
          exit 1;
        fi

    command: [ "/bin/sh" ]
    args: ["-c", *testVault]
  restartPolicy: Never
  volumes:
  {{- if .Values.vault.tls.enabled }}
  - name: vault-tls-data
    secret:
      secretName: {{ .Values.vault.tls.secret.name }}
  {{- end }}
{{- end }}